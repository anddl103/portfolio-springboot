buildscript {
	ext {
		mooworkNodeVersion = "1.3.1"
		set('springCloudVersion', "Hoxton.SR8")
	}
}

plugins {
	id "com.moowork.node" version "${mooworkNodeVersion}"
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
}

group = 'com.hybe.larva'
version = '0.9.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

task yarnBuild(type: YarnTask) {
	doFirst {
		workingDir = file("${project.projectDir}/../frontend")
		if (System.properties['spring.profiles.active'] == 'prod') {
			args = ['build:prod']
		} else if (System.properties['spring.profiles.active'] == 'dev') {
			args = ['build:dev']
		} else if (System.properties['spring.profiles.active'] == 'qa') {
			args = ['build:qa']
		} else {
			args = ['build']
		}
	}
}

task createBundle(type: Zip) {
	dependsOn build
	group = 'build'
	from ('./.platform') {
		into '.platform'
	}
	from (jar.outputs.files) {
		into '.'
	}

	archiveFileName.set("larva-${System.properties['spring.profiles.active']}-${project.version}.zip")
	def destination = file("${project.projectDir}/../bundle")
	destinationDirectory.set(destination)
}

// compileJava 시 자동으로 yarn build - build - create bundle 이 되도록 명명
compileJava.dependsOn(yarnBuild)
build.finalizedBy(createBundle)

// bootRun 시 yarn build 안하도록 설정
gradle.taskGraph.whenReady { graph ->
	if (graph.hasTask(bootRun)) {
		tasks.withType(YarnTask){
			enabled = false
		}
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-mustache'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws'
	implementation 'com.amazonaws:aws-java-sdk-cloudfront:1.12.40'
	implementation 'com.google.guava:guava:30.0-jre'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'org.apache.commons:commons-csv:1.8'
	implementation 'net.sf.supercsv:super-csv:2.4.0'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'
	implementation 'org.jetbrains:annotations:16.0.2'
	implementation 'javax.xml.bind:jaxb-api:2.3.0'
	implementation 'net.javacrumbs.shedlock:shedlock-spring:4.20.0'
	implementation 'net.javacrumbs.shedlock:shedlock-provider-mongo:4.20.0'
	implementation 'org.imgscalr:imgscalr-lib:4.2'
	implementation 'org.springframework:spring-test:5.2.9.RELEASE'
	implementation 'com.google.code.gson:gson:2.8.6'
	implementation 'com.google.firebase:firebase-admin:7.1.1'
	implementation 'commons-io:commons-io:2.11.0'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

sourceSets {
	main {
		resources {
			srcDirs("src/main/resources", "src/main/resources/profiles")
		}
	}
}

bootRun {
	systemProperty "spring.profiles.active", System.properties['spring.profiles.active']
}

processResources {
	filesMatching('**/application.yml') {
		expand(project.properties)
	}
}

test {
	useJUnitPlatform()
}
